 class : logically related group of data, functions (methods) -- from: http://bit.ly/1TZVhNb
   class != object, tho often used interchangably
   self is generic variable used in writing classes to be filled with data on each instance
       methods containing self = "instance methods"
   __init__ method should set all necessary attributes to call all functions in class :
       "it should be impossible for an object to get into an invalid state just by calling its methods"
   class Class(object): # object implies "no inheritance"
       static = !value
       def __init__(self, arg1, arg2): # blueprint for each instance, should define all attributes
           self.arg1 = !value
           self.arg2 = !value
       def function(self, arg1):
           somecode
           somecode
   call class like function, i.e. Class(arg1, arg2, arg3)
       inst = Class(arg1, arg2)
           for __init__, varName passed in, hence self parameter in def'n, i.e. Class(inst, arg1, arg2)
       "use class blueprint to create object, 'class instance'"
   can then call functions defined for class on instance
       inst.function(arg1)
   as well as instance methods, static methods (vars or fxns) can be set for attributes true for all instances
       static methods can be called via Class.method or Inst.method
       precede any static method fxns with @staticmethod decorator
   finally class methods can be set preceded by @classmethod decorator
       passed Class rather than instance
   inheritance : process by which "child" derives dates/behavior of "parent"
       Liskov Substitution Principle : child class acceptable wherever parent class expected
   "abstract base class" : class comprising universal formulas to be passed to tangible classes/instances
       to prevent creation of ABC instance : 'from abc import ABCMeta, abstractmethod', then set '__metaclass__ = ABCmeta' within abc
       create @abstractmethod--def fxn(): pass--at end of parent to be inherited and defined by child--def fxn(self): return '!value'
       to pass to child class : class Child(Parent):

ex 40 notes

use classes to add consistency, create cleaner programs
"object-oriented programming" in terms of dictionaries, modules
  "modules are like dictionaries"
    map one thing to another
    module = py file w functions/variables you import, access via dot operator
    in python, pattern is get something from key=value container by key's name
  "classes are like modules"
    class = group functions/data inside container to access via dot operator, i.e.

      class MyStuff(object):

          def __init__(self):
              self.tangerine = "And now a thousand years between"

          def apple(self):
              print "I AM CLASSY APPLES!"

      classes used instead of modules because you can create independent objects with them
    "objects are like import"
      rather than import, you "instantiate" (or create) to create object, i.e.

        thing = MyStuff()
        thing.apple()
        print thing.tangerine

      when you instatiate, python:
        determines MyStuff() is class
        creates object w functions/attributes declared in class
        looks for __init__ function, calls it to initialize the object
        recognizes self.var variables
        assigns all of the above to variable you used to create object
      not giving you class, assigning blueprint
    "classes are blueprints for mini-modules"
    "create/import via instantiation"
    "each mini-module is an object assigned to a variable"
